#
# Copyright 2020 Adobe. All rights reserved.
# This file is licensed to you under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License. You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
# OF ANY KIND, either express or implied. See the License for the specific language
# governing permissions and limitations under the License.
#

# In order to persistently set default options for your project, copy this file
# and remove the '.sample' suffix. Then uncomment the relevant options for your
# project. Note that this file is included before `project(Lagrange)` is defined,
# so we can use it to define the C and C++ compilers, but some variables such as
# PROJECT_SOURCE_DIR will not be defined yet. You can use CMAKE_SOURCE_DIR instead.

################################################################################
# CMake Options
################################################################################

# Specify a custom install prefix path
# set(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/install CACHE STRING "Install directory used by install().")

# Generates a `compile_commands.json` that can be used for autocompletion
# set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE BOOL "Enable/Disable output of compile commands during generation.")

# Use a specific C/C++ compiler, e.g. llvm-clang on macOS (so we can use clangd)
# set(CMAKE_C_COMPILER   "/usr/local/opt/llvm/bin/clang"   CACHE STRING "C compiler")
# set(CMAKE_CXX_COMPILER "/usr/local/opt/llvm/bin/clang++" CACHE STRING "C++ compiler")

# Set deployment platform for macOS
# set(CMAKE_OSX_DEPLOYMENT_TARGET 10.12 CACHE STRING "macOS deployment target")

# Always add colored output (e.g. when using Ninja)
# list(APPEND CMAKE_CXX_FLAGS -fdiagnostics-color=always) # GCC
# list(APPEND CMAKE_CXX_FLAGS -fcolor-diagnostics) # Clang

################################################################################
# Lagrange Options
################################################################################

# Meta option.
# option(LAGRANGE_ALL             "Build all lagrange modules"             ON)

# Optional modules in alphabetical order.
# option(LAGRANGE_FS "Build module lagrange::fs" ON)
# option(LAGRANGE_IO "Build module lagrange::io" ON)
# option(LAGRANGE_UI "Build module lagrange::ui" ON)

# UI
# option(LAGRANGE_UI_USE_MDL           "Use Material Definition Library"   ON)

# Others
# option(LAGRANGE_DOCUMENTATION      "Build Doxygen documentation"                          ON)
# option(LAGRANGE_EXAMPLES           "Build all examples"                                   ON)
# option(LAGRANGE_INSTALL            "Enable installation"                                  OFF)
# option(LAGRANGE_PERFORMANCE_TESTS  "Build all performance tests"                          ON)
# option(LAGRANGE_UNIT_TESTS         "Build all unit tests"                                 ON)
# option(LAGRANGE_USE_PCH            "Enable precompiled headers"                           ON)
# option(LAGRANGE_WITH_ASSIMP        "Add assimp functionality to lagrange::io"             ON)
# option(LAGRANGE_WITH_ONETBB        "Build Lagrange with OneTBB 2021 rather than TBB 2020" OFF)
# option(LAGRANGE_WITH_TRACY         "Build tracy client with Lagrange"                     ON)
# option(LAGRANGE_SLOW_TESTS         "Enable slow unit tests"                               ON)
# option(LAGRANGE_DISABLE_FPE        "Disable floating point exception code"                OFF)
# option(LAGRANGE_ASSERT_DEBUG_BREAK "Assert will break into debugger on failure"           OFF)
# set(LAGRANGE_DATA_FOLDER          "path/to/data" CACHE PATH "Where to download or find test data")

# Options for third-party libraries
# option(EIGEN_WITH_MKL "Use Eigen with MKL" ON)
# set(MKL_INTERFACE "lp64"   CACHE STRING "Interface layer to use with MKL (lp64 or ilp64)")
# set(MKL_LINKING   "static" CACHE STRING "Linking strategy to use with MKL (static, dynamic or sdl)")
# set(MKL_THREADING "tbb"    CACHE STRING "Threading layer to use with MKL (sequential, tbb or openmp)")
# option(TBB_PREFER_STATIC        "Use the static version of TBB for the alias target" ON)

################################################################################
# Sanitizer Options
################################################################################

# set(USE_SANITIZER
#     ""
#     CACHE STRING
#     "Compile with a sanitizer. Options are: Address, Memory, MemoryWithOrigins, Undefined, Thread, Leak, 'Address;Undefined'"
# )

################################################################################
# FetchContent Options
################################################################################

# option(FETCHCONTENT_FULLY_DISCONNECTED   "Disables all attempts to download or update content and assumes source dirs already exist" ON)
# option(FETCHCONTENT_UPDATES_DISCONNECTED "Enables UPDATE_DISCONNECTED behavior for all content population" ON)
# option(FETCHCONTENT_QUIET                "Enables QUIET option for all content population" ON)
# set(FETCHCONTENT_BASE_DIR "${CMAKE_BINARY_DIR}/_deps" CACHE PATH "Directory under which to collect all populated content")
