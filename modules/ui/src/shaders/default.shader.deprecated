/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
#include "common.glsl"
#include "uniforms/common.glsl"

#pragma VERTEX
#include "util/default.vertex"


#pragma FRAGMENT
layout(location = 0) out vec4 fragColor;

in VARYING {
    vec3 pos;
    vec3 normal;
    vec2 uv;
    vec4 color;
} fs_in;

//Camera position in world space

#include "material.glsl"
uniform MaterialPhong material;

#include "phong.glsl"



void main(){

    vec3 lightPos = vec3(-5,5,0);
    vec3 lightDir = normalize(lightPos - fs_in.pos);
    vec3 viewDir = normalize(cameraPos - fs_in.pos);
    vec3 N = normalize(fs_in.normal);
    

    /*vec3 finalColor = vec3(0.0);
    for(int i=0; i < lightsNum; i++){
        finalColor += phong(lights[i],material,fs_in.pos,viewDir,N);
    }*/

    vec3 finalColor = phong(
          lightDir, viewDir, normalize(fs_in.normal)          
    );  


    fragColor = vec4(finalColor.xyz, material.opacity);
    //fragColor = vec4((N + vec3(1.0f)) * 0.5f,1);

    //vec3 testColor = texture2D(material.diffuse.texture,fs_in.uv).xyz;
    //fragColor = vec4(testColor,1.0);
    //fragColor = vec4(fs_in.uv,0,1.0);

    

    //normal
    //fragColor = vec4(normalize(normal), 1);

    //fragColor = vec4(vec3(dot(reflect(-lightDir, N),viewDir)), 1);

    //depth
    //fragColor = vec4(1.0 - vec3(length(cameraPos - pos)) / 3, material.opacity);
}
