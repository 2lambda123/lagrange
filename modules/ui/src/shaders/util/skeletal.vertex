/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

layout (location = 0) in vec3 in_pos;
layout (location = 1) in vec3 in_normal;
layout (location = 2) in vec2 in_uv;
layout (location = 3) in vec4 in_bone_ids;
layout (location = 3) in vec4 in_bone_weights;
layout (location = 4) in vec4 in_tangent;
layout (location = 5) in vec4 in_bitangent;

out VARYING {
    vec3 pos;
    vec3 normal;
    vec2 uv;
    vec4 color;
    vec3 tangent;
    vec3 bitangent;
} vs_out;

const int MAX_NUM_BONES = 32
uniform mat4 bones[MAX_NUM_BONES];

//Default color when attribute is not set 
#pragma property uniform_color "Default Color" Color(1,0,0,1)

void main()
{       

    vec4 model_pos = vec4(in_pos, 1);
    vec4 skinned_pos = bones[in_bone_ids[0]] * model_pos * in_bone_weights[0]
    + bones[in_bone_ids[1]] * model_pos * in_bone_weights[1]
    + bones[in_bone_ids[2]] * model_pos * in_bone_weights[2]
    + bones[in_bone_ids[3]] * model_pos * in_bone_weights[3];
    
   
    //Pos and normal to world space
    vs_out.pos = (M * skinned_pos).xyz; 
    vs_out.normal = (NMat * vec4(in_normal,0.0)).xyz;
    vs_out.uv = in_uv;
    vs_out.color = uniform_color;  
    vs_out.tangent = (NMat * vec4(in_tangent)).xyz;;
    vs_out.bitangent = (NMat * vec4(in_bitangent)).xyz;; 

    //To clip space
    gl_Position = PV * vec4(vs_out.pos,1.0);
}